<?xml version="1.0" encoding="UTF-8" ?>

<taglib xmlns="http://java.sun.com/xml/ns/j2ee" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://java.sun.com/xml/ns/j2ee http://java.sun.com/xml/ns/j2ee/web-jsptaglibrary_2_0.xsd"
	version="2.0">

	<description>JSTL 1.1 functions library</description>
	<display-name>JSTL functions</display-name>
	<tlib-version>1.1</tlib-version>
	<short-name>fn</short-name>
	<uri>http://java.sun.com/jsp/jstl/functions</uri>

	<function>
		<description>
      Tests if an input string contains the specified substring.
    </description>
		<name>contains</name>
		<function-class>org.apache.taglibs.standard.functions.Functions</function-class>
		<function-signature>boolean contains(java.lang.String,
			java.lang.String)</function-signature>
		<example>
      &lt;c:if test="${fn:contains(name, searchString)}">
    </example>
	</function>

	<function>
		<description>
      Tests if an input string contains the specified substring in a case insensitive way.
    </description>
		<name>containsIgnoreCase</name>
		<function-class>org.apache.taglibs.standard.functions.Functions</function-class>
		<function-signature>boolean containsIgnoreCase(java.lang.String,
			java.lang.String)</function-signature>
		<example>
      &lt;c:if test="${fn:containsIgnoreCase(name, searchString)}">
    </example>
	</function>

	<function>
		<description>
      Tests if an input string ends with the specified suffix.
    </description>
		<name>endsWith</name>
		<function-class>org.apache.taglibs.standard.functions.Functions</function-class>
		<function-signature>boolean endsWith(java.lang.String,
			java.lang.String)</function-signature>
		<example>
      &lt;c:if test="${fn:endsWith(filename, ".txt")}">
    </example>
	</function>

	<function>
		<description>
      Tests if an input string(replace all html tag) ends with the specified suffix.
    </description>
		<name>endsWithTrimHtml</name>
		<function-class>cn.j.common.utils.StrUtil</function-class>
		<function-signature>boolean endsWithTrimHtml(java.lang.String,
			java.lang.String)</function-signature>
		<example>
      &lt;c:if test="${fn:endsWithTrimHtml(filename, ".txt")}">
    </example>
	</function>

	<function>
		<description>
      Escapes characters that could be interpreted as XML markup.
    </description>
		<name>escapeXml</name>
		<function-class>org.apache.taglibs.standard.functions.Functions</function-class>
		<function-signature>java.lang.String escapeXml(java.lang.String)</function-signature>
		<example>
      ${fn:escapeXml(param:info)}
    </example>
	</function>

	<function>
		<description>
      Returns the index withing a string of the first occurrence of a specified substring.
    </description>
		<name>indexOf</name>
		<function-class>org.apache.taglibs.standard.functions.Functions</function-class>
		<function-signature>int indexOf(java.lang.String, java.lang.String)</function-signature>
		<example>
      ${fn:indexOf(name, "-")}
    </example>
	</function>

	<function>
		<description>
      Joins all elements of an array into a string.
    </description>
		<name>join</name>
		<function-class>org.apache.taglibs.standard.functions.Functions</function-class>
		<function-signature>java.lang.String join(java.lang.String[],
			java.lang.String)</function-signature>
		<example>
      ${fn:join(array, ";")}
    </example>
	</function>

	<function>
		<description>
      Returns the number of items in a collection, or the number of characters in a string.
    </description>
		<name>length</name>
		<function-class>org.apache.taglibs.standard.functions.Functions</function-class>
		<function-signature>int length(java.lang.Object)</function-signature>
		<example>
      You have ${fn:length(shoppingCart.products)} in your shopping cart.
    </example>
	</function>

	<function>
		<description>
      Returns a string resulting from replacing in an input string all occurrences
      of a "before" string into an "after" substring.
    </description>
		<name>replace</name>
		<function-class>org.apache.taglibs.standard.functions.Functions</function-class>
		<function-signature>java.lang.String replace(java.lang.String,
			java.lang.String, java.lang.String)</function-signature>
		<example>
      ${fn:replace(text, "-", "&#149;")}
    </example>
	</function>

	<function>
		<description>
      Splits a string into an array of substrings.
    </description>
		<name>split</name>
		<function-class>org.apache.taglibs.standard.functions.Functions</function-class>
		<function-signature>java.lang.String[] split(java.lang.String,
			java.lang.String)</function-signature>
		<example>
      ${fn:split(customerNames, ";")}
    </example>
	</function>

	<function>
		<description>
      Tests if an input string starts with the specified prefix.
    </description>
		<name>startsWith</name>
		<function-class>org.apache.taglibs.standard.functions.Functions</function-class>
		<function-signature>boolean startsWith(java.lang.String,
			java.lang.String)</function-signature>
		<example>
      &lt;c:if test="${fn:startsWith(product.id, "100-")}">
    </example>
	</function>

	<function>
		<description>
      Returns a subset of a string.
    </description>
		<name>substring</name>
		<function-class>org.apache.taglibs.standard.functions.Functions</function-class>
		<function-signature>java.lang.String substring(java.lang.String, int,
			int)</function-signature>
		<example>
      P.O. Box: ${fn:substring(zip, 6, -1)}
    </example>
	</function>

	<function>
		<description>
      Returns a subset of a string following a specific substring.
    </description>
		<name>substringAfter</name>
		<function-class>org.apache.taglibs.standard.functions.Functions</function-class>
		<function-signature>java.lang.String substringAfter(java.lang.String,
			java.lang.String)</function-signature>
		<example>
      P.O. Box: ${fn:substringAfter(zip, "-")}
    </example>
	</function>

	<function>
		<description>
      Returns a subset of a string before a specific substring.
    </description>
		<name>substringBefore</name>
		<function-class>org.apache.taglibs.standard.functions.Functions</function-class>
		<function-signature>java.lang.String substringBefore(java.lang.String,
			java.lang.String)</function-signature>
		<example>
      Zip (without P.O. Box): ${fn:substringBefore(zip, "-")}
    </example>
	</function>

	<function>
		<description>
      Converts all of the characters of a string to lower case.
    </description>
		<name>toLowerCase</name>
		<function-class>org.apache.taglibs.standard.functions.Functions</function-class>
		<function-signature>java.lang.String toLowerCase(java.lang.String)</function-signature>
		<example>
      Product name: ${fn.toLowerCase(product.name)}
    </example>
	</function>

	<function>
		<description>
      Converts all of the characters of a string to upper case.
    </description>
		<name>toUpperCase</name>
		<function-class>org.apache.taglibs.standard.functions.Functions</function-class>
		<function-signature>java.lang.String toUpperCase(java.lang.String)</function-signature>
		<example>
      Product name: ${fn.UpperCase(product.name)}
    </example>
	</function>

	<function>
		<description>
      Removes white spaces from both ends of a string.
    </description>
		<name>trim</name>
		<function-class>org.apache.taglibs.standard.functions.Functions</function-class>
		<function-signature>java.lang.String trim(java.lang.String)</function-signature>
		<example>
      Name: ${fn.trim(name)}
    </example>
	</function>

	<function>
		<description>
      Truncate string to match presentation.
    </description>
		<name>truncate</name>
		<function-class>cn.j.common.utils.BeanUtils</function-class>
		<function-signature>java.lang.String truncate(java.lang.String,int)</function-signature>
		<example>
      Name: ${fn.truncate(str,i)}
    </example>
	</function>
	<function>
		<description>
      Truncate string to match presentation.
    </description>
		<name>truncate2</name>
		<function-class>cn.j.common.utils.BeanUtils</function-class>
		<function-signature>java.lang.String
			truncate(java.lang.String,java.lang.String,int)</function-signature>
		<example>
      Name: ${fn.truncate(str,"...",i)}
    </example>
	</function>
	<function>
		<description>
      special for mainArea
    </description>
		<name>truncateMainArea</name>
		<function-class>cn.j.common.utils.StrUtil</function-class>
		<function-signature>java.lang.String
			truncateMainArea(java.lang.String,int,int)</function-signature>
		<example>
      Name: ${fn.truncateMainArea(str,50,10)}
    </example>
	</function>

	<function>
		<description>
      remove all html tags.
    </description>
		<name>trimHtml</name>
		<function-class>cn.j.common.utils.StrUtil</function-class>
		<function-signature>java.lang.String trimHtml(java.lang.String)</function-signature>
		<example>
      Name: ${fn.trimHtml(str)}
    </example>
	</function>
	<function>
		<description>
      remove all html tags
    </description>
		<name>lessContent</name>
		<function-class>cn.j.common.utils.StrUtil</function-class>
		<function-signature>java.lang.String trimHtml(java.lang.String,int)</function-signature>
		<example>
      Name: ${fn.trimHtml(str,100)}
    </example>
	</function>

	<function>
		<description>
      string to js legal string.
    </description>
		<name>str2js</name>
		<function-class>cn.j.common.utils.StrUtil</function-class>
		<function-signature>java.lang.String str2js(java.lang.String)</function-signature>
		<example>
      Name: ${fn.str2js(str)}
    </example>
	</function>

	<function>
		<description>
      Tests if an input string contains the specified substring.
    </description>
		<name>containsExpressionName</name>
		<function-class>cn.j.common.utils.StrUtil</function-class>
		<function-signature>boolean
			containsExpressionName(java.lang.String,java.lang.String,java.lang.String)</function-signature>
		<example>
      Name: ${fn.containsExpressionName(inputStr,substr,split)}
    </example>
	</function>

	<function>
		<description>
      Tests if an input string contains the specified substring.
    </description>
		<name>expressionUrlGen</name>
		<function-class>cn.j.common.utils.B2cStrUtil</function-class>
		<function-signature>java.lang.String
			expressionUrlGen(javax.servlet.http.HttpServletRequest,java.lang.String,java.lang.Integer)</function-signature>
		<example>
      Name: ${fn.expressionUrlGen(request,expressionName,expressionGroupId)}
    </example>
	</function>

	<function>
		<description>
      secret caller number
    </description>
		<name>secretCallerNumber</name>
		<function-class>cn.j.common.utils.StrUtil</function-class>
		<function-signature>java.lang.String
			secretCallerNumber(java.lang.String)</function-signature>
		<example>
      Name: ${fn.secretCallerNumber(caller)}
    </example>
	</function>
	<function>
		<description>
      Returns a string resulting from replacing in an input string all occurrences
      of a "before" string into an "after" substring.
    </description>
		<name>replaceAll</name>
		<function-class>cn.j.common.utils.StrUtil</function-class>
		<function-signature>java.lang.String replaceAll(java.lang.String,
			java.lang.String, java.lang.String)</function-signature>
		<example>
      ${fn:replace(text, "-", "&#149;")}
    </example>
	</function>
	<function>
		<description>
      
    </description>
		<name>appendBindHref</name>
		<function-class>cn.j.common.utils.StrUtil</function-class>
		<function-signature>java.lang.String appendBindHref(java.lang.String,
			java.lang.String)</function-signature>
		<example>
      ${fn:appendBindHref(text, "start"}
      ${fn:appendBindHref(text, "end"}
    </example>
	</function>
	<function>
		<description>
      concat strings with split
    </description>
		<name>concat</name>
		<function-class>cn.j.common.utils.StrUtil</function-class>
		<function-signature>java.lang.String concatStr(java.lang.String,
			java.lang.String,java.lang.String)</function-signature>
		<example>
      ${fn:concat(text, textSuffix,"-"}
    </example>
	</function>

	<function>
		<description>
      ddd
    </description>
		<name>leftNavGen</name>
		<function-class>cn.j.common.utils.StrUtil</function-class>
		<function-signature>java.lang.String leftNavGen(java.lang.String,
			java.lang.String, java.lang.String, java.lang.String)</function-signature>
		<example>
      eee
    </example>
	</function>
	<function>
		<description>
      generation the corperation site filter links
    </description>
		<name>coFilterLinkGen</name>
		<function-class>cn.j.common.utils.StrUtil</function-class>
		<function-signature>java.lang.String
			coFilterLinkGen(javax.servlet.http.HttpServletRequest,java.lang.String,
			java.lang.String, java.lang.String, java.lang.String)</function-signature>
		<example>
      fn:coFilterLinkGen(request,channelName,categoryName,productName,filter_String)
      fn:coFilterLinkGen(request,'channel','category','product','filter')
    </example>
	</function>
	<function>
		<description>
      parse string/float to int
    </description>
		<name>parseInt</name>
		<function-class>cn.j.common.utils.StrUtil</function-class>
		<function-signature>int parseInt(java.lang.String)</function-signature>
		<example>
      ${fn:parseInt(10.0)}
    </example>
	</function>

	<function>
		<description>
      decide the attibute display or not
    </description>
		<name>availabeAttribute</name>
		<function-class>cn.j.common.utils.StrUtil</function-class>
		<function-signature>boolean availabeAttribute(java.lang.String)</function-signature>
		<example>
      ${fn:availabeAttribute('xxx')}
    </example>
	</function>

	<function>
		<description>
      can set expiretime?
    </description>
		<name>cansetexpiretime</name>
		<function-class>cn.j.common.utils.StrUtil</function-class>
		<function-signature>boolean cansetexpiretime(java.lang.String)</function-signature>
		<example>
      ${fn:cansetexpiretime('xxx')}
    </example>
	</function>

	<function>
		<description>
     can cancel blackphone?
    </description>
		<name>cancancelblackphone</name>
		<function-class>cn.j.common.utils.StrUtil</function-class>
		<function-signature>boolean cancancelblackphone(java.lang.String)</function-signature>
		<example>
      ${fn:cancancelblackphone('xxx')}
    </example>
	</function>

	<function>
		<description>
      get lastCallTime
    </description>
		<name>lastCallTime</name>
		<function-class>cn.j.common.utils.StrUtil</function-class>
		<function-signature>java.lang.String lastCallTime(java.util.Date)</function-signature>
		<example>
      Name: ${fn.lastCallTime(date)}
    </example>
	</function>
	<function>
		<description>
      return a string value
    </description>
		<name>toStr</name>
		<function-class>cn.j.common.utils.StrUtil</function-class>
		<function-signature>java.lang.String toStr(java.lang.Object)</function-signature>
		<example>
      Name: ${fn.toStr(obj)}
    </example>
	</function>

</taglib>
